import { test, expect } from "vitest";
import { ClientDataType, parseAuthenticatorData, parseClientDataJSON } from "./auth.js";
import { COSEPublicKey } from "./cose.js";

import type { AuthenticatorData, WebAuthnCredential, ClientData } from "./auth.js";

const authenticatorData = new Uint8Array([
	0x49, 0x96, 0x0d, 0xe5, 0x88, 0x0e, 0x8c, 0x68, 0x74, 0x34, 0x17, 0x0f, 0x64, 0x76, 0x60, 0x5b,
	0x8f, 0xe4, 0xae, 0xb9, 0xa2, 0x86, 0x32, 0xc7, 0x99, 0x5c, 0xf3, 0xba, 0x83, 0x1d, 0x97, 0x63,
	0x5d, 0x00, 0x00, 0x00, 0x00, 0xfb, 0xfc, 0x30, 0x07, 0x15, 0x4e, 0x4e, 0xcc, 0x8c, 0x0b, 0x6e,
	0x02, 0x05, 0x57, 0xd7, 0xbd, 0x00, 0x14, 0x89, 0xb6, 0xf4, 0xf4, 0x89, 0x04, 0x51, 0xb9, 0xa5,
	0xb1, 0x3c, 0x3e, 0xcf, 0x80, 0x5e, 0xa6, 0x9e, 0x32, 0xa1, 0xf1, 0xa5, 0x01, 0x02, 0x03, 0x26,
	0x20, 0x01, 0x21, 0x58, 0x20, 0x71, 0xb8, 0x2d, 0xa9, 0xd2, 0xcd, 0x0d, 0xf5, 0x1d, 0x7c, 0xbf,
	0x99, 0x77, 0x97, 0xf0, 0x83, 0x96, 0x30, 0xa0, 0x76, 0x59, 0x8d, 0x33, 0xfc, 0xf7, 0x6b, 0x42,
	0x8c, 0x35, 0xb8, 0xbc, 0xc8, 0x22, 0x58, 0x20, 0x72, 0xa5, 0x8b, 0xb8, 0x3a, 0xa3, 0xf0, 0x23,
	0x07, 0x77, 0x5d, 0xdb, 0x75, 0x35, 0x97, 0x9f, 0x23, 0x51, 0xbd, 0xdd, 0xd4, 0x88, 0xa5, 0x99,
	0x3d, 0x65, 0x27, 0x0f, 0x1c, 0xb3, 0x2c, 0xcd
]);

const expectedAttestationCredential: WebAuthnCredential = {
	authenticatorAAGUID: new Uint8Array([
		0xfb, 0xfc, 0x30, 0x07, 0x15, 0x4e, 0x4e, 0xcc, 0x8c, 0x0b, 0x6e, 0x02, 0x05, 0x57, 0xd7, 0xbd
	]),
	id: new Uint8Array([
		0x89, 0xb6, 0xf4, 0xf4, 0x89, 0x04, 0x51, 0xb9, 0xa5, 0xb1, 0x3c, 0x3e, 0xcf, 0x80, 0x5e, 0xa6,
		0x9e, 0x32, 0xa1, 0xf1
	]),
	publicKey: new COSEPublicKey({
		"1": 2,
		"3": -7
	})
};

const expectedAuthenticatorData: AuthenticatorData = {
	relyingPartyIdHash: new Uint8Array([
		0x49, 0x96, 0x0d, 0xe5, 0x88, 0x0e, 0x8c, 0x68, 0x74, 0x34, 0x17, 0x0f, 0x64, 0x76, 0x60, 0x5b,
		0x8f, 0xe4, 0xae, 0xb9, 0xa2, 0x86, 0x32, 0xc7, 0x99, 0x5c, 0xf3, 0xba, 0x83, 0x1d, 0x97, 0x63
	]),
	userPresent: true,
	userVerified: true,
	signatureCounter: 0,
	credential: expectedAttestationCredential,
	extensions: null
};

const clientDataJSON = new Uint8Array([
	0x7b, 0x22, 0x74, 0x79, 0x70, 0x65, 0x22, 0x3a, 0x22, 0x77, 0x65, 0x62, 0x61, 0x75, 0x74, 0x68,
	0x6e, 0x2e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x22, 0x2c, 0x22, 0x63, 0x68, 0x61, 0x6c, 0x6c,
	0x65, 0x6e, 0x67, 0x65, 0x22, 0x3a, 0x22, 0x42, 0x51, 0x59, 0x48, 0x43, 0x41, 0x22, 0x2c, 0x22,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x22, 0x3a, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x68, 0x6f, 0x73, 0x74, 0x3a, 0x35, 0x31, 0x37, 0x33, 0x22, 0x7d
]);

const expectedClientData: ClientData = {
	type: ClientDataType.Create,
	challenge: new Uint8Array([0x05, 0x06, 0x07, 0x08]),
	origin: "http://localhost:5173",
	crossOrigin: false,
	tokenBinding: null
};

test("parseAuthenticatorData()", () => {
	const parsed = parseAuthenticatorData(authenticatorData);
	expect(parsed).toStrictEqual(expectedAuthenticatorData);
});

test("parseClientDataJSON()", () => {
	const parsed = parseClientDataJSON(clientDataJSON);
	expect(parsed).toStrictEqual(expectedClientData);
});
